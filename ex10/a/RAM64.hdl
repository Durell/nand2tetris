// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here.
	//same like ram8
			 
		Nand(a=address[3], b=address[3], out=outNS);
	
		Nand(a = outNS,  b = load, out = x);
		Nand(a=x, b=x, out=out1);
		
		Nand(a = address[2],  b = load, out = x1);
		Nand(a=x1, b=x1, out=out2);	

		DMux4Way(in=out1, a=a, b=b, c=c, d=d, sel[0] = address[0], sel[1]=address[1]);
		DMux4Way(in=out2, a=e, b=f, c=g, d=h, sel[0] = address[0], sel[1]=address[1]);
		 
		 Nand(a = load,  b = true,out = x10);
		 Nand(a=x10, b=x10, out=out10);
		 DMux8Way(in=out10, sel=address[3..5], a=aRam, b=bRam, c=cRam, d=dRam, e=eRam, f=fRam, g=gRam, h=hRam);
		 
		 RAM8(in=in, load=aRam, address=address[0..2], out=aRamOut);
		 RAM8(in=in, load=bRam, address=address[0..2], out=bRamOut);
		 RAM8(in=in, load=cRam, address=address[0..2], out=cRamOut);
		 RAM8(in=in, load=dRam, address=address[0..2], out=dRamOut);
		 RAM8(in=in, load=eRam, address=address[0..2], out=eRamOut);
		 RAM8(in=in, load=fRam, address=address[0..2], out=fRamOut);
		 RAM8(in=in, load=gRam, address=address[0..2], out=gRamOut);
		 RAM8(in=in, load=hRam, address=address[0..2], out=hRamOut);
		 
		 Mux8Way16(a=aRamOut, b=bRamOut, c=cRamOut, d=dRamOut, e=eRamOut, f=fRamOut, g=gRamOut, h=hRamOut, sel=address[3..5], out=out);
		
}
