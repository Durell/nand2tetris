// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    // Put your code here.

	//y part
	// if (zy==1) set y = 0 , if (ny==1) set y = ~y 
	Mux16(a=y, b = false, sel = zy, out=outYis0); // y is zero
	
	Not16(in = outYis0,out = outYiz0Neg); //not y
	
	Mux16(a = outYis0, b = outYiz0Neg, sel= ny, out = y1); // if ny
	
	//x part
	// if (zx==1) set x = 0 ,  (nx==1) set x = ~x 
	Mux16(a=x, b=false, sel=zx, out=outXiz0); //x is zero
	
	Not16(in=outXiz0, out = outXiz0Neg); // not x
	
	Mux16(a=outXiz0, b=outXiz0Neg, sel = nx, out = x1); //if nz
	
	
	
	//now actually add & and if f = 1 or 0
	// if (f==1)  set out = x + y, if (f==0)  set out = x & y
	And16(a=x1, b=y1,out=xAndy);
	
	Add16(a=x1, b=y1,out=xAddy);
	
	Mux16(a=xAndy, b=xAddy,sel=f, out = tmp); // tmp is add or and according to f value
	
	//no part
	//if (no==1) set out = ~out
	Not16(in=tmp, out = tmpNeg);
	Mux16(a= tmp, b = tmpNeg, sel = no, out = out, out[0..7]=out1, out[8..15]=out2, out[15]=ng); //ng out
	
		Or8Way(in=out1, out=toO1);
		Or8Way(in=out2, out=toO2);
		
	   Nand(a = toO1, b=toO1, out = xT);
	   Nand(a=toO2, b=toO2, out = yT);
	   Nand(a=xT, b=yT, out = outTn);  // out after or
	   
	   // Not outTn
	   Nand(a=outTn, b=outTn, out=zr); //zr out

}
